// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/courier_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "backend/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCourierService is a mock of CourierService interface.
type MockCourierService struct {
	ctrl     *gomock.Controller
	recorder *MockCourierServiceMockRecorder
}

// MockCourierServiceMockRecorder is the mock recorder for MockCourierService.
type MockCourierServiceMockRecorder struct {
	mock *MockCourierService
}

// NewMockCourierService creates a new mock instance.
func NewMockCourierService(ctrl *gomock.Controller) *MockCourierService {
	mock := &MockCourierService{ctrl: ctrl}
	mock.recorder = &MockCourierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierService) EXPECT() *MockCourierServiceMockRecorder {
	return m.recorder
}

// GetCourierByID mocks base method.
func (m *MockCourierService) GetCourierByID(id uuid.UUID) (*entity.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierByID", id)
	ret0, _ := ret[0].(*entity.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierByID indicates an expected call of GetCourierByID.
func (mr *MockCourierServiceMockRecorder) GetCourierByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierByID", reflect.TypeOf((*MockCourierService)(nil).GetCourierByID), id)
}

// UpdateCourierLocation mocks base method.
func (m *MockCourierService) UpdateCourierLocation(id uuid.UUID, location entity.Geometry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourierLocation", id, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourierLocation indicates an expected call of UpdateCourierLocation.
func (mr *MockCourierServiceMockRecorder) UpdateCourierLocation(id, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourierLocation", reflect.TypeOf((*MockCourierService)(nil).UpdateCourierLocation), id, location)
}

// UpdateCourierStatus mocks base method.
func (m *MockCourierService) UpdateCourierStatus(id uuid.UUID, status entity.CourierStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourierStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourierStatus indicates an expected call of UpdateCourierStatus.
func (mr *MockCourierServiceMockRecorder) UpdateCourierStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourierStatus", reflect.TypeOf((*MockCourierService)(nil).UpdateCourierStatus), id, status)
}
